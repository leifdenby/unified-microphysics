!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module test ! in 
    interface  ! in :test
        module microphysics_pylib ! in :test:microphysics_pylib.F90
            use microphysics_register, only: n_species,mp_n_gases=>n_gases,mp_n_moments__max=>n_moments__max,mp_n_solids=>n_solids
            use microphysics_common, only: cp_mixture,cv_mixture
            use microphysics_initialisation, only: mp_init=>init
            subroutine init(microphysics_name) ! in :test:microphysics_pylib.F90:microphysics_pylib
                character*(*) intent(in) :: microphysics_name
            end subroutine init
            subroutine raise_python_exception(mesg) ! in :test:microphysics_pylib.F90:microphysics_pylib
                character*(*) intent(in) :: mesg
            end subroutine raise_python_exception
            subroutine calc_dq(q_g,q_tr,dt,temp,pressure,dq_g,dq_tr,n_gases,n_solids,n_moments__max,ierr) ! in :test:microphysics_pylib.F90:microphysics_pylib
                callstatement (*f2py_func)( ... ); if (ierr == 1) pyerr_setstring(pyexc_valueerror, "msg")
                use microphysics_register, only: idx_dry_air,idx_cwater,idx_water_vapour
                use microphysics_constants, only: kint,l_cond,kreal
                real(kind=kreal) dimension(n_gases),intent(in) :: q_g
                real(kind=kreal) dimension(n_solids,n_moments__max),intent(in) :: q_tr
                real(kind=kreal) intent(in) :: dt
                real(kind=kreal) intent(in) :: temp
                real(kind=kreal) intent(in) :: pressure
                real(kind=kreal) dimension(n_gases),intent(out),depend(n_gases) :: dq_g
                real(kind=kreal) dimension(n_solids,n_moments__max),intent(out),depend(n_solids,n_moments__max) :: dq_tr
                integer, optional,intent(in),check(len(q_g)>=n_gases),depend(q_g) :: n_gases=len(q_g)
                integer, optional,intent(in),check(shape(q_tr,0)==n_solids),depend(q_tr) :: n_solids=shape(q_tr,0)
                integer, optional,intent(in),check(shape(q_tr,1)==n_moments__max),depend(q_tr) :: n_moments__max=shape(q_tr,1)
                integer, optional,intent(out) :: ierr=0
            end subroutine calc_dq
            function dimensions_valid(n_gases,n_solids,n_moments__max) result (ok) ! in :test:microphysics_pylib.F90:microphysics_pylib
                integer intent(in) :: n_gases
                integer intent(in) :: n_solids
                integer intent(in) :: n_moments__max
                logical :: ok
            end function dimensions_valid
            function init_called() ! in :test:microphysics_pylib.F90:microphysics_pylib
                logical :: init_called
            end function init_called
        end module microphysics_pylib
    end interface 
end python module test

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
